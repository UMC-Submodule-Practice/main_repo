name: SpringBoot Application CI-CD with Gradle

on:
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  cicd_workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTION_TOKEN }}
          submodules: true

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      - name: Prepare environment
        run: |
          mkdir -p src/main/resources/application-config
          cp -r ./config/* src/main/resources/application-config/

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Test with Gradle
        run: SPRING_PROFILES_ACTIVE=test ./gradlew test

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2.15.1
        if: always()
        with:
          files: '**/build/test-results/test/TEST-*.xml'

      - name: Set Version
        id: set_current_date
        run: echo "version=$(date '+%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: Docker Image Build
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/springboot:${{ steps.set_current_date.outputs.version }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/springboot:${{ steps.set_current_date.outputs.version }} ${{ secrets.DOCKERHUB_USERNAME }}/springboot:latest

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Hub Push
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/springboot:${{ steps.set_current_date.outputs.version }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/springboot:latest

      # - name: Docker Deploy In EC2
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.AWS_EC2_HOST }}
      #     username: ec2-user
      #     key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
      #     script: |
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/springboot:latest
      #       docker stop springboot || true
      #       docker rm springboot || true
      #       docker run --name springboot --rm -d -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/springboot:latest
      #       docker system prune -f
